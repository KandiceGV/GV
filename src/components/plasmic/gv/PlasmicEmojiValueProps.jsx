// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: mzuCRszeeZdCMSdpkmycrs
// Component: ebWN3X5SLeTx
import * as React from "react";
import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/react-web/lib/host";
import {
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts
} from "@plasmicapp/react-web";
import Value from "../../Value"; // plasmic-import: wpQxAb5ONARx/component
import Button from "../../Button"; // plasmic-import: ZhULiaU9WIpl/component
import "@plasmicapp/react-web/lib/plasmic.css";
import projectcss from "./plasmic_gv.module.css"; // plasmic-import: mzuCRszeeZdCMSdpkmycrs/projectcss
import sty from "./PlasmicEmojiValueProps.module.css"; // plasmic-import: ebWN3X5SLeTx/css
import PlaneIcon from "./icons/PlasmicIcon__Plane"; // plasmic-import: _0SrNulZlqMH/icon
import RightArrowIcon from "./icons/PlasmicIcon__RightArrow"; // plasmic-import: a6n81dhOd79x/icon
import DocumentIcon from "./icons/PlasmicIcon__Document"; // plasmic-import: 0jEl_eA7Ps7S/icon
import LockIcon from "./icons/PlasmicIcon__Lock"; // plasmic-import: X7zTl_H-d9AE/icon

createPlasmicElementProxy;

export const PlasmicEmojiValueProps__VariantProps = new Array();

export const PlasmicEmojiValueProps__ArgProps = new Array("children");

const __wrapUserFunction =
  globalThis.__PlasmicWrapUserFunction ?? ((loc, fn) => fn());

const __wrapUserPromise =
  globalThis.__PlasmicWrapUserPromise ??
  (async (loc, promise) => {
    return await promise;
  });

function PlasmicEmojiValueProps__RenderFunc(props) {
  const { variants, overrides, forNode } = props;
  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);
  const $props = {
    ...args,
    ...variants
  };
  const $ctx = ph.useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;
  const currentUser = p.useCurrentUser?.() || {};
  return (
    <section
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        sty.root
      )}
    >
      {p.renderPlasmicSlot({
        defaultContents: (
          <p.Stack
            as={"div"}
            hasGap={true}
            className={classNames(projectcss.all, sty.freeBox__bhPhT)}
          >
            <Value
              children2={
                <Button
                  className={classNames("__wab_instance", sty.button__tauFk)}
                  colors={"black"}
                  endIcon={
                    <RightArrowIcon
                      className={classNames(projectcss.all, sty.svg__tn259)}
                      role={"img"}
                    />
                  }
                  rounded={true}
                  size={"large"}
                  submitsForm={true}
                >
                  {"Read our letter"}
                </Button>
              }
              className={classNames("__wab_instance", sty.value__gziYn)}
              icon={
                <PlaneIcon
                  className={classNames(projectcss.all, sty.svg__mU8FZ)}
                  role={"img"}
                />
              }
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__sqxpq
                )}
              >
                {"Worldwide shipping"}
              </div>
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__qHSh
                )}
              >
                {"Special financing and earn rewards."}
              </div>
            </Value>
            <Value
              children2={
                <Button
                  className={classNames("__wab_instance", sty.button__wNg0T)}
                  colors={"black"}
                  endIcon={
                    <RightArrowIcon
                      className={classNames(projectcss.all, sty.svg__mgEi)}
                      role={"img"}
                    />
                  }
                  rounded={true}
                  size={"large"}
                  submitsForm={true}
                >
                  {"Read our letter"}
                </Button>
              }
              className={classNames("__wab_instance", sty.value__ysfEe)}
              icon={
                <DocumentIcon
                  className={classNames(projectcss.all, sty.svg__lgT4T)}
                  role={"img"}
                />
              }
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__qYKoK
                )}
              >
                {"30-day guarantee"}
              </div>
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text___7SjyG
                )}
              >
                {"Free return policy."}
              </div>
            </Value>
            <Value
              children2={
                <Button
                  className={classNames("__wab_instance", sty.button__iGVy0)}
                  colors={"black"}
                  endIcon={
                    <RightArrowIcon
                      className={classNames(projectcss.all, sty.svg__dctBo)}
                      role={"img"}
                    />
                  }
                  rounded={true}
                  size={"large"}
                  submitsForm={true}
                >
                  {"Read our letter"}
                </Button>
              }
              className={classNames("__wab_instance", sty.value___5CKpe)}
              icon={
                <LockIcon
                  className={classNames(projectcss.all, sty.svg___39W7W)}
                  role={"img"}
                />
              }
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__x7SFq
                )}
              >
                {"Secured payments"}
              </div>
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__rcDrB
                )}
              >
                {"We accept major credit cards."}
              </div>
            </Value>
          </p.Stack>
        ),

        value: args.children
      })}
    </section>
  );
}

const PlasmicDescendants = {
  root: ["root"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicEmojiValueProps__ArgProps,
          internalVariantPropNames: PlasmicEmojiValueProps__VariantProps
        }),
      [props, nodeName]
    );

    return PlasmicEmojiValueProps__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicEmojiValueProps";
  } else {
    func.displayName = `PlasmicEmojiValueProps.${nodeName}`;
  }
  return func;
}

export const PlasmicEmojiValueProps = Object.assign(
  // Top-level PlasmicEmojiValueProps renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    // Metadata about props expected for PlasmicEmojiValueProps
    internalVariantProps: PlasmicEmojiValueProps__VariantProps,
    internalArgProps: PlasmicEmojiValueProps__ArgProps
  }
);

export default PlasmicEmojiValueProps;
/* prettier-ignore-end */
